[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "eventrio.node_modules..pnpm.flat-cache@4.0.1.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules..pnpm.flat-cache@4.0.1.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "eventrio.node_modules..pnpm.flat-cache@4.0.1.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "eventrio.node_modules..pnpm.flat-cache@4.0.1.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules..pnpm.flat-cache@4.0.1.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "eventrio.node_modules..pnpm.flat-cache@4.0.1.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "eventrio.node_modules..pnpm.flat-cache@4.0.1.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules..pnpm.flat-cache@4.0.1.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "eventrio.node_modules..pnpm.flat-cache@4.0.1.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "eventrio.node_modules..pnpm.flat-cache@4.0.1.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules..pnpm.flat-cache@4.0.1.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "eventrio.node_modules..pnpm.flat-cache@4.0.1.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "eventrio.node_modules..pnpm.flatted@3.3.3.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules..pnpm.flatted@3.3.3.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "eventrio.node_modules..pnpm.flatted@3.3.3.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "eventrio.node_modules..pnpm.flatted@3.3.3.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules..pnpm.flatted@3.3.3.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "eventrio.node_modules..pnpm.flatted@3.3.3.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "eventrio.node_modules..pnpm.flatted@3.3.3.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules..pnpm.flatted@3.3.3.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "eventrio.node_modules..pnpm.flatted@3.3.3.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "eventrio.node_modules..pnpm.flatted@3.3.3.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules..pnpm.flatted@3.3.3.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "eventrio.node_modules..pnpm.flatted@3.3.3.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "eventrio.node_modules..pnpm.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules..pnpm.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "eventrio.node_modules..pnpm.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "eventrio.node_modules..pnpm.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules..pnpm.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "eventrio.node_modules..pnpm.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "eventrio.node_modules..pnpm.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules..pnpm.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "eventrio.node_modules..pnpm.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "eventrio.node_modules..pnpm.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules..pnpm.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "eventrio.node_modules..pnpm.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "eventrio.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "eventrio.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "eventrio.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "eventrio.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "eventrio.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "eventrio.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "eventrio.node_modules.flatted.python.flatted",
        "description": "eventrio.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "eventrio.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "Clock",
        "kind": 6,
        "importPath": "New folder.test",
        "description": "New folder.test",
        "peekOfCode": "class Clock:\n    def __init__(self,seconds=0,minutes=0,hours=0):\n        self.hours =hours%24\n        self.minutes = minutes%60\n        self.seconds = seconds%60\n    def tick(self):\n        self.seconds +=1\n        if self.seconds ==60:\n            self.minutes = 1\n            self.seconds =0",
        "detail": "New folder.test",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "New folder.test",
        "description": "New folder.test",
        "peekOfCode": "clock = Clock(23,59,59)\nprint(clock)\nclock.tick()            \nprint(clock)",
        "detail": "New folder.test",
        "documentation": {}
    }
]